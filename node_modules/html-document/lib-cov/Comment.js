
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/Comment.js', [1,3,8,20,21,23,77,78,79,9,17,24,32,34,74,29,40,48,58,69], {"4_6_11":0,"5_6_13":0}, ["\"use strict\";","","var _classProps = function (child, staticProps, instanceProps) {","  if (staticProps) Object.defineProperties(child, staticProps);","  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);","};","","var _extends = function (child, parent) {","  child.prototype = Object.create(parent.prototype, {","    constructor: {","      value: child,","      enumerable: false,","      writable: true,","      configurable: true","    }","  });","  child.__proto__ = parent;","};","","var escapeHTML = require(\"./utils/escapeHTML\");","var Node = require(\"./Node\").Node;","","var Comment = (function (Node) {","  var Comment =","  /**","   * @param {String}","   */","  function Comment(comment) {","    this._value = comment;","  };","","  _extends(Comment, Node);","","  _classProps(Comment, null, {","    innerHTML: {","      /**","       * @return {String}","       */","      get: function () {","        return \"\";","      }","    },","    outerHTML: {","      /**","       * @return {String}","       */","      get: function () {","        return \"<!--\" + escapeHTML(this._value) + \"-->\";","      }","    },","    data: {","      /**","       * Returns comment's value","       *","       * @return {String}","       */","      get: function () {","        return this._value;","      },","","","      /**","       * Set comment's value","       *","       * @param {String} data","       * @return {String}","       */","      set: function (data) {","        this._value = data;","      }","    }","  });","","  return Comment;","})(Node);","","exports.Comment = Comment;","Object.defineProperty(Comment.prototype, \"nodeType\", { value: Node.COMMENT_NODE });","Object.defineProperty(Comment.prototype, \"nodeName\", { value: \"#comment\" });","//# sourceMappingURL=Comment.js.map"]);
_$jscmd("lib/Comment.js", "line", 1);

"use strict";

_$jscmd("lib/Comment.js", "line", 3);

var _classProps = function(child, staticProps, instanceProps) {
    if (_$jscmd("lib/Comment.js", "cond", "4_6_11", staticProps)) Object.defineProperties(child, staticProps);
    if (_$jscmd("lib/Comment.js", "cond", "5_6_13", instanceProps)) Object.defineProperties(child.prototype, instanceProps);
};

_$jscmd("lib/Comment.js", "line", 8);

var _extends = function(child, parent) {
    _$jscmd("lib/Comment.js", "line", 9);
    child.prototype = Object.create(parent.prototype, {
        constructor: {
            value: child,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    _$jscmd("lib/Comment.js", "line", 17);
    child.__proto__ = parent;
};

_$jscmd("lib/Comment.js", "line", 20);

var escapeHTML = require("./utils/escapeHTML");

_$jscmd("lib/Comment.js", "line", 21);

var Node = require("./Node").Node;

_$jscmd("lib/Comment.js", "line", 23);

var Comment = function(Node) {
    _$jscmd("lib/Comment.js", "line", 24);
    var Comment = /**
   * @param {String}
   */
    function Comment(comment) {
        _$jscmd("lib/Comment.js", "line", 29);
        this._value = comment;
    };
    _$jscmd("lib/Comment.js", "line", 32);
    _extends(Comment, Node);
    _$jscmd("lib/Comment.js", "line", 34);
    _classProps(Comment, null, {
        innerHTML: {
            /**
       * @return {String}
       */
            get: function() {
                _$jscmd("lib/Comment.js", "line", 40);
                return "";
            }
        },
        outerHTML: {
            /**
       * @return {String}
       */
            get: function() {
                _$jscmd("lib/Comment.js", "line", 48);
                return "<!--" + escapeHTML(this._value) + "-->";
            }
        },
        data: {
            /**
       * Returns comment's value
       *
       * @return {String}
       */
            get: function() {
                _$jscmd("lib/Comment.js", "line", 58);
                return this._value;
            },
            /**
       * Set comment's value
       *
       * @param {String} data
       * @return {String}
       */
            set: function(data) {
                _$jscmd("lib/Comment.js", "line", 69);
                this._value = data;
            }
        }
    });
    _$jscmd("lib/Comment.js", "line", 74);
    return Comment;
}(Node);

_$jscmd("lib/Comment.js", "line", 77);

exports.Comment = Comment;

_$jscmd("lib/Comment.js", "line", 78);

Object.defineProperty(Comment.prototype, "nodeType", {
    value: Node.COMMENT_NODE
});

_$jscmd("lib/Comment.js", "line", 79);

Object.defineProperty(Comment.prototype, "nodeName", {
    value: "#comment"
});