
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/HTMLElement/elements/HTMLOptionElement.js', [1,3,8,20,22,232,9,17,23,28,30,229,24,25,39,50,61,72,74,86,89,100,110,121,132,137,143,140,153,164,171,166,168,173,184,197,195,208,209,221,223], {"4_6_11":0,"5_6_13":0,"61_15_31":0,"61_50_70":0,"61_51_39":0,"61_94_25":0,"71_12_8":0,"139_14_26":0,"163_12_8":0,"165_14_23":0,"167_16_14":0,"209_32_16":0,"209_51_5":0,"220_12_5":0}, ["\"use strict\";","","var _classProps = function (child, staticProps, instanceProps) {","  if (staticProps) Object.defineProperties(child, staticProps);","  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);","};","","var _extends = function (child, parent) {","  child.prototype = Object.create(parent.prototype, {","    constructor: {","      value: child,","      enumerable: false,","      writable: true,","      configurable: true","    }","  });","  child.__proto__ = parent;","};","","var HTMLElement = require(\"../../HTMLElement\").HTMLElement;","","var HTMLOptionElement = (function (HTMLElement) {","  var HTMLOptionElement = function HTMLOptionElement() {","    HTMLElement.call(this);","    this.nodeName = \"option\";","  };","","  _extends(HTMLOptionElement, HTMLElement);","","  _classProps(HTMLOptionElement, null, {","    defaultSelected: {","      /**","       * Contains the initial value of the selected HTML attribute,","       * indicating whether the option is selected by default or not.","       *","       * @return {Boolean}","       */","      get: function () {","        throw new Error(\"Unsuported\");","      },","","","      /**","       * Contains the initial value of the selected HTML attribute,","       * indicating whether the option is selected by default or not.","       *","       * @param {Boolean} selected","       */","      set: function (selected) {","        throw new Error(\"Unsuported\");","      }","    },","    disabled: {","      /**","       * Reflects the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected.","       * An option can also be disabled if it is a child of an <optgroup> element that is disabled.","       *","       * @return {Boolean}","       */","      get: function () {","        return !!this.getAttribute(\"disabled\") && (this.parentNode.nodeName !== \"optgroup\" || !this.parentNode.disabled);","      },","","","      /**","       * Reflects the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected.","       *","       * @param {Boolean} disabled","       */","      set: function (disabled) {","        if (disabled) {","          this.setAttribute(\"disabled\", \"disabled\");","        } else {","          this.removeAttribute(\"disabled\");","        }","      }","    },","    form: {","      /**","       * If the option is a descendent of a <select> element, then this property has the same value as","       * the form property of the corresponding HTMLSelectElement object; otherwise, it is null.","       *","       * @return {HTMLFormElement}","       */","      get: function () {","        throw new Error(\"Not implemented\");","      },","      set: function (value) {","        throw new Error(\"form is read only\");","      }","    },","    index: {","      /**","       * The position of the option within the list of options it belongs to, in tree-order.","       * If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0.","       *","       * @return {Number}","       */","      get: function () {","        throw new Error(\"Not implemented\");","      },","","","      /**","       * The position of the option within the list of options it belongs to, in tree-order.","       * If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0.","       *","       */","      set: function (value) {","        throw new Error(\"index is read only\");","      }","    },","    label: {","      /**","       * Reflects the value of the label HTML attribute, which provides a label for the option.","       * If this attribute isn't specifically set, reading it returns the element's text content.","       *","       * @return {Number}","       */","      get: function () {","        throw new Error(\"Not implemented\");","      },","","","      /**","       * Reflects the value of the label HTML attribute, which provides a label for the option.","       * If this attribute isn't specifically set, reading it returns the element's text content.","       *","       * @param {Number}","       */","      set: function (label) {","        throw new Error(\"Not implemented\");","      }","    },","    _select: {","      get: function () {","        var node = this;","        while (node = node.parentNode) {","          if (node.nodeName === \"select\") {","            return node;","          }","        }","        return null;","      }","    },","    selected: {","      /**","       * Indicates whether the option is currently selected.","       *","       * @return {Boolean}","       */","      get: function () {","        return !!this.getAttribute(\"selected\");","      },","","","      /**","       * Indicates whether the option is currently selected.","       *","       * @param {Boolean} selected","       */","      set: function (selected) {","        if (selected) {","          var selectElement = this._select;","          if (!selectElement.multiple) {","            var selectedOption = selectElement.selectedOption;","            if (selectedOption) {","              selectedOption.selected = false;","            }","          }","          this.setAttribute(\"selected\", \"selected\");","        } else {","          this.removeAttribute(\"selected\");","        }","      }","    },","    text: {","      /**","       * Contains the text content of the element.","       *","       * @return {String}","       */","      get: function () {","        return this.textContent;","      },","","","      /**","       * Contains the text content of the element.","       *","       * @param {String} text","       */","      set: function (text) {","        while (this.firstChild) {","          this.removeChild(this.firstChild);","        }","        this.appendChild(this.ownerDocument.createTextNode(text));","      }","    },","    value: {","      /**","       * Reflects the value of the value HTML attribute, if it exists;","       * otherwise reflects value of the Node.textContent property.","       *","       * @return {String}","       */","      get: function () {","        var value = this.getAttribute(\"value\");","        return value === null ? this.textContent : value;","      },","","","      /**","       * Reflects the value of the value HTML attribute, if it exists;","       * otherwise reflects value of the Node.textContent property.","       *","       * @param {String} value","       */","      set: function (value) {","        if (value) {","          this.setAttribute(\"value\", value);","        } else {","          this.removeAttribute(\"value\");","        }","      }","    }","  });","","  return HTMLOptionElement;","})(HTMLElement);","","exports.HTMLOptionElement = HTMLOptionElement;","//# sourceMappingURL=../../HTMLElement/elements/HTMLOptionElement.js.map"]);
_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 1);

"use strict";

_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 3);

var _classProps = function(child, staticProps, instanceProps) {
    if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "4_6_11", staticProps)) Object.defineProperties(child, staticProps);
    if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "5_6_13", instanceProps)) Object.defineProperties(child.prototype, instanceProps);
};

_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 8);

var _extends = function(child, parent) {
    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 9);
    child.prototype = Object.create(parent.prototype, {
        constructor: {
            value: child,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 17);
    child.__proto__ = parent;
};

_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 20);

var HTMLElement = require("../../HTMLElement").HTMLElement;

_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 22);

var HTMLOptionElement = function(HTMLElement) {
    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 23);
    var HTMLOptionElement = function HTMLOptionElement() {
        _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 24);
        HTMLElement.call(this);
        _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 25);
        this.nodeName = "option";
    };
    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 28);
    _extends(HTMLOptionElement, HTMLElement);
    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 30);
    _classProps(HTMLOptionElement, null, {
        defaultSelected: {
            /**
       * Contains the initial value of the selected HTML attribute,
       * indicating whether the option is selected by default or not.
       *
       * @return {Boolean}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 39);
                throw new Error("Unsuported");
            },
            /**
       * Contains the initial value of the selected HTML attribute,
       * indicating whether the option is selected by default or not.
       *
       * @param {Boolean} selected
       */
            set: function(selected) {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 50);
                throw new Error("Unsuported");
            }
        },
        disabled: {
            /**
       * Reflects the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected.
       * An option can also be disabled if it is a child of an <optgroup> element that is disabled.
       *
       * @return {Boolean}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 61);
                return _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "61_15_31", !!this.getAttribute("disabled")) && _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "61_50_70", _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "61_51_39", this.parentNode.nodeName !== "optgroup") || _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "61_94_25", !this.parentNode.disabled));
            },
            /**
       * Reflects the value of the disabled HTML attribute, which indicates that the option is unavailable to be selected.
       *
       * @param {Boolean} disabled
       */
            set: function(disabled) {
                if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "71_12_8", disabled)) {
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 72);
                    this.setAttribute("disabled", "disabled");
                } else {
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 74);
                    this.removeAttribute("disabled");
                }
            }
        },
        form: {
            /**
       * If the option is a descendent of a <select> element, then this property has the same value as
       * the form property of the corresponding HTMLSelectElement object; otherwise, it is null.
       *
       * @return {HTMLFormElement}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 86);
                throw new Error("Not implemented");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 89);
                throw new Error("form is read only");
            }
        },
        index: {
            /**
       * The position of the option within the list of options it belongs to, in tree-order.
       * If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0.
       *
       * @return {Number}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 100);
                throw new Error("Not implemented");
            },
            /**
       * The position of the option within the list of options it belongs to, in tree-order.
       * If the option is not part of a list of options, like when it is part of the <datalist> element, the value is 0.
       *
       */
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 110);
                throw new Error("index is read only");
            }
        },
        label: {
            /**
       * Reflects the value of the label HTML attribute, which provides a label for the option.
       * If this attribute isn't specifically set, reading it returns the element's text content.
       *
       * @return {Number}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 121);
                throw new Error("Not implemented");
            },
            /**
       * Reflects the value of the label HTML attribute, which provides a label for the option.
       * If this attribute isn't specifically set, reading it returns the element's text content.
       *
       * @param {Number}
       */
            set: function(label) {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 132);
                throw new Error("Not implemented");
            }
        },
        _select: {
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 137);
                var node = this;
                while (node = node.parentNode) {
                    if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "139_14_26", node.nodeName === "select")) {
                        _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 140);
                        return node;
                    }
                }
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 143);
                return null;
            }
        },
        selected: {
            /**
       * Indicates whether the option is currently selected.
       *
       * @return {Boolean}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 153);
                return !!this.getAttribute("selected");
            },
            /**
       * Indicates whether the option is currently selected.
       *
       * @param {Boolean} selected
       */
            set: function(selected) {
                if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "163_12_8", selected)) {
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 164);
                    var selectElement = this._select;
                    if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "165_14_23", !selectElement.multiple)) {
                        _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 166);
                        var selectedOption = selectElement.selectedOption;
                        if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "167_16_14", selectedOption)) {
                            _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 168);
                            selectedOption.selected = false;
                        }
                    }
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 171);
                    this.setAttribute("selected", "selected");
                } else {
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 173);
                    this.removeAttribute("selected");
                }
            }
        },
        text: {
            /**
       * Contains the text content of the element.
       *
       * @return {String}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 184);
                return this.textContent;
            },
            /**
       * Contains the text content of the element.
       *
       * @param {String} text
       */
            set: function(text) {
                while (this.firstChild) {
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 195);
                    this.removeChild(this.firstChild);
                }
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 197);
                this.appendChild(this.ownerDocument.createTextNode(text));
            }
        },
        value: {
            /**
       * Reflects the value of the value HTML attribute, if it exists;
       * otherwise reflects value of the Node.textContent property.
       *
       * @return {String}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 208);
                var value = this.getAttribute("value");
                _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 209);
                return value === null ? _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "209_32_16", this.textContent) : _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "209_51_5", value);
            },
            /**
       * Reflects the value of the value HTML attribute, if it exists;
       * otherwise reflects value of the Node.textContent property.
       *
       * @param {String} value
       */
            set: function(value) {
                if (_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "cond", "220_12_5", value)) {
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 221);
                    this.setAttribute("value", value);
                } else {
                    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 223);
                    this.removeAttribute("value");
                }
            }
        }
    });
    _$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 229);
    return HTMLOptionElement;
}(HTMLElement);

_$jscmd("lib/HTMLElement/elements/HTMLOptionElement.js", "line", 232);

exports.HTMLOptionElement = HTMLOptionElement;