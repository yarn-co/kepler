
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/HTMLElement/elements/HTMLSelectElement.js', [1,3,8,20,22,350,9,17,23,28,30,34,38,42,347,24,25,31,35,39,45,48,61,64,69,80,92,94,105,108,118,129,131,140,150,158,161,172,184,186,197,198,202,219,200,204,205,209,211,212,216,229,239,240,251,252,258,254,255,269,279,284,295,298,303,306,311,314,324,334,339,342], {"4_6_11":0,"5_6_13":0,"91_12_8":0,"128_12_8":0,"183_12_8":0,"199_12_15":0,"203_14_15":0,"208_12_30":0,"208_12_12":0,"208_28_14":0,"210_16_19":0,"215_14_12":0,"253_14_15":0,"269_15_33":0,"269_52_23":0,"269_69_1":0,"269_73_1":0,"295_31_17":0,"295_51_12":0,"324_15_19":0,"324_38_25":0}, ["\"use strict\";","","var _classProps = function (child, staticProps, instanceProps) {","  if (staticProps) Object.defineProperties(child, staticProps);","  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);","};","","var _extends = function (child, parent) {","  child.prototype = Object.create(parent.prototype, {","    constructor: {","      value: child,","      enumerable: false,","      writable: true,","      configurable: true","    }","  });","  child.__proto__ = parent;","};","","var HTMLElement = require(\"../../HTMLElement\").HTMLElement;","","var HTMLSelectElement = (function (HTMLElement) {","  var HTMLSelectElement = function HTMLSelectElement() {","    HTMLElement.call(this);","    this.nodeName = \"select\";","  };","","  _extends(HTMLSelectElement, HTMLElement);","","  HTMLSelectElement.prototype.item = function (index) {","    throw new Error(\"Not implemented\");","  };","","  HTMLSelectElement.prototype.namedItem = function (name) {","    throw new Error(\"Not implemented\");","  };","","  HTMLSelectElement.prototype.remove = function (index) {","    throw new Error(\"Not implemented\");","  };","","  _classProps(HTMLSelectElement, null, {","    autoFocus: {","      get: function () {","        throw new Error(\"Not implemented\");","      },","      set: function (value) {","        throw new Error(\"Not implemented\");","      }","    },","    form: {","      /**","       * The form that this element is associated with. If this element is a descendant of a form element,","       * then this attribute is the ID of that form element.","       * If the element is not a descendant of a form element, then:","       * The attribute can be the ID of any form element in the same document.","       *","       * @return {HTMLFormElement}","       */","      get: function () {","        throw new Error(\"Not implemented\");","      },","      set: function (value) {","        throw new Error(\"form is read only\");","      }","    },","    labels: {","      get: function () {","        throw new Error(\"Not implemented\");","      }","    },","    disabled: {","      /**","       * Reflects the disabled HTML attribute, which indicates whether the control is disabled.","       * If it is disabled, it does not accept clicks.","       *","       * @return {Boolean}","       */","      get: function () {","        return !!this.getAttribute(\"disabled\");","      },","","","      /**","       * Reflects the disabled HTML attribute, which indicates whether the control is disabled.","       * If it is disabled, it does not accept clicks.","       *","       * @param {Boolean} disabled","       */","      set: function (disabled) {","        if (disabled) {","          this.setAttribute(\"disabled\", \"disabled\");","        } else {","          this.removeAttribute(\"disabled\");","        }","      }","    },","    length: {","      /**","       * The number of <option> elements in this select element.","       *","       * @return {Number}","       */","      get: function () {","        return this.options.length;","      },","      set: function (value) {","        throw new Error(\"Length is read only\");","      }","    },","    multiple: {","      /**","       * Reflects the multiple HTML attribute, whichindicates whether multiple items can be selected.","       *","       * @return {Boolean}","       */","      get: function () {","        return !!this.getAttribute(\"multiple\");","      },","","","      /**","       * Reflects the multiple HTML attribute, whichindicates whether multiple items can be selected.","       *","       * @param {Boolean} multiple","       */","      set: function (multiple) {","        if (multiple) {","          this.setAttribute(\"multiple\", \"multiple\");","        } else {","          this.removeAttribute(\"multiple\");","        }","      }","    },","    name: {","      /**","       * Reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions.","       */","      get: function () {","        return this.getAttribute(\"name\");","      },","","","      /**","       * Reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions.","       *","       * @param {String} name","       */","      set: function (name) {","        this.setAttribute(\"name\", name);","      }","    },","    options: {","      /**","       * The set of <option> elements contained by this element. Read only.","       */","      get: function () {","        return this.getElementsByTagName(\"option\");","      },","      set: function (value) {","        throw new Error(\"options is read only\");","      }","    },","    required: {","      /**","       * Reflects the required HTML attribute, which indicates whether the user is required","       * to select a value before submitting the form","       *","       * @return {Boolean}","       */","      get: function () {","        return !!this.getAttribute(\"required\");","      },","","","      /**","       * Reflects the required HTML attribute, which indicates whether the user is required","       * to select a value before submitting the form","       *","       * @param {Boolean} required","       */","      set: function (required) {","        if (required) {","          this.setAttribute(\"required\", \"required\");","        } else {","          this.removeAttribute(\"required\");","        }","      }","    },","    selectedIndex: {","      /**","       * The index of the first selected <option> element. The value -1 is returned if no element is selected.","       *","       * @return {Number}","       */","      get: function () {","        var index = -1;","        var options = this.options;","        if (!options.length) {","          return index;","        }","        options.some(function (option, i) {","          if (option.selected) {","            index = i;","            return true;","          }","        });","        if (index === -1 && !this.multiple) {","          options.some(function (option, i) {","            if (option.value === \"\") {","              index = i;","              return true;","            }","          });","          if (index === -1) {","            return 0;","          }","        }","        return index;","      },","","","      /**","       * The index of the first selected <option> element. The value -1 is returned if no element is selected.","       *","       * @return {Number}","       */","      set: function (index) {","        throw new Error(\"Not implemented\");","      }","    },","    selectedOptions: {","      /**","       * The set of options that are selected.","       *","       * @return {HTMLCollection}","       */","      get: function () {","        return this.options.filter(function (option) {","          return option.selected;","        });","      }","    },","    selectedOption: {","      /**","       * The first selected option.","       *","       * @return HTMLOptionElement","       */","      get: function () {","        var selectedOption;","        this.options.some(function (option) {","          if (option.selected) {","            selectedOption = option;","            return true;","          }","        });","        return selectedOption;","      }","    },","    size: {","      /**","       * Reflects the size HTML attribute, which contains the number of visible items in the control.","       * The default is 1, unless multiple is true, in which case it is 4.","       *","       * @return {Number}","       */","      get: function () {","        return Number(this.getAttribute(\"size\")) || (this.multiple ? 4 : 1);","      },","","","      /**","       * Reflects the size HTML attribute, which contains the number of visible items in the control.","       *","       * @param {String} name","       */","      set: function (size) {","        this.setAttribute(\"size\", size);","      }","    },","    tabIndex: {","      get: function () {","        throw new Error(\"Obsolete since HTML5\");","      }","    },","    type: {","      /**","       * The form control's type. When multiple is true, it returns select-multiple; otherwise, it returns select-one.","       * Read only.","       *","       * @return {String}","       */","      get: function () {","        return this.multiple ? \"select-multiple\" : \"select-one\";","      },","      set: function (value) {","        throw new Error(\"type is read only\");","      }","    },","    validationMessage: {","      get: function () {","        throw new Error(\"Not implemented\");","      },","      set: function (value) {","        throw new Error(\"validationMessage is read only\");","      }","    },","    validity: {","      get: function () {","        throw new Error(\"Not implemented\");","      },","      set: function (value) {","        throw new Error(\"validity is read only\");","      }","    },","    value: {","      /**","       * The value of this form control, that is, of the first selected option.","       *","       * @return {String}","       */","      get: function () {","        return this.selectedOption && this.selectedOption.value;","      },","","","      /**","       * The value of this form control, that is, of the first selected option.","       *","       * @param {String} value","       */","      set: function (value) {","        return this.selectedOption.value = value;","      }","    },","    willValidate: {","      get: function () {","        throw new Error(\"Not implemented\");","      },","      set: function (value) {","        throw new Error(\"willValidate is read only\");","      }","    }","  });","","  return HTMLSelectElement;","})(HTMLElement);","","exports.HTMLSelectElement = HTMLSelectElement;","//# sourceMappingURL=../../HTMLElement/elements/HTMLSelectElement.js.map"]);
_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 1);

"use strict";

_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 3);

var _classProps = function(child, staticProps, instanceProps) {
    if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "4_6_11", staticProps)) Object.defineProperties(child, staticProps);
    if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "5_6_13", instanceProps)) Object.defineProperties(child.prototype, instanceProps);
};

_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 8);

var _extends = function(child, parent) {
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 9);
    child.prototype = Object.create(parent.prototype, {
        constructor: {
            value: child,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 17);
    child.__proto__ = parent;
};

_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 20);

var HTMLElement = require("../../HTMLElement").HTMLElement;

_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 22);

var HTMLSelectElement = function(HTMLElement) {
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 23);
    var HTMLSelectElement = function HTMLSelectElement() {
        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 24);
        HTMLElement.call(this);
        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 25);
        this.nodeName = "select";
    };
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 28);
    _extends(HTMLSelectElement, HTMLElement);
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 30);
    HTMLSelectElement.prototype.item = function(index) {
        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 31);
        throw new Error("Not implemented");
    };
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 34);
    HTMLSelectElement.prototype.namedItem = function(name) {
        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 35);
        throw new Error("Not implemented");
    };
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 38);
    HTMLSelectElement.prototype.remove = function(index) {
        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 39);
        throw new Error("Not implemented");
    };
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 42);
    _classProps(HTMLSelectElement, null, {
        autoFocus: {
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 45);
                throw new Error("Not implemented");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 48);
                throw new Error("Not implemented");
            }
        },
        form: {
            /**
       * The form that this element is associated with. If this element is a descendant of a form element,
       * then this attribute is the ID of that form element.
       * If the element is not a descendant of a form element, then:
       * The attribute can be the ID of any form element in the same document.
       *
       * @return {HTMLFormElement}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 61);
                throw new Error("Not implemented");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 64);
                throw new Error("form is read only");
            }
        },
        labels: {
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 69);
                throw new Error("Not implemented");
            }
        },
        disabled: {
            /**
       * Reflects the disabled HTML attribute, which indicates whether the control is disabled.
       * If it is disabled, it does not accept clicks.
       *
       * @return {Boolean}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 80);
                return !!this.getAttribute("disabled");
            },
            /**
       * Reflects the disabled HTML attribute, which indicates whether the control is disabled.
       * If it is disabled, it does not accept clicks.
       *
       * @param {Boolean} disabled
       */
            set: function(disabled) {
                if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "91_12_8", disabled)) {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 92);
                    this.setAttribute("disabled", "disabled");
                } else {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 94);
                    this.removeAttribute("disabled");
                }
            }
        },
        length: {
            /**
       * The number of <option> elements in this select element.
       *
       * @return {Number}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 105);
                return this.options.length;
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 108);
                throw new Error("Length is read only");
            }
        },
        multiple: {
            /**
       * Reflects the multiple HTML attribute, whichindicates whether multiple items can be selected.
       *
       * @return {Boolean}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 118);
                return !!this.getAttribute("multiple");
            },
            /**
       * Reflects the multiple HTML attribute, whichindicates whether multiple items can be selected.
       *
       * @param {Boolean} multiple
       */
            set: function(multiple) {
                if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "128_12_8", multiple)) {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 129);
                    this.setAttribute("multiple", "multiple");
                } else {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 131);
                    this.removeAttribute("multiple");
                }
            }
        },
        name: {
            /**
       * Reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions.
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 140);
                return this.getAttribute("name");
            },
            /**
       * Reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions.
       *
       * @param {String} name
       */
            set: function(name) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 150);
                this.setAttribute("name", name);
            }
        },
        options: {
            /**
       * The set of <option> elements contained by this element. Read only.
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 158);
                return this.getElementsByTagName("option");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 161);
                throw new Error("options is read only");
            }
        },
        required: {
            /**
       * Reflects the required HTML attribute, which indicates whether the user is required
       * to select a value before submitting the form
       *
       * @return {Boolean}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 172);
                return !!this.getAttribute("required");
            },
            /**
       * Reflects the required HTML attribute, which indicates whether the user is required
       * to select a value before submitting the form
       *
       * @param {Boolean} required
       */
            set: function(required) {
                if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "183_12_8", required)) {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 184);
                    this.setAttribute("required", "required");
                } else {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 186);
                    this.removeAttribute("required");
                }
            }
        },
        selectedIndex: {
            /**
       * The index of the first selected <option> element. The value -1 is returned if no element is selected.
       *
       * @return {Number}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 197);
                var index = -1;
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 198);
                var options = this.options;
                if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "199_12_15", !options.length)) {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 200);
                    return index;
                }
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 202);
                options.some(function(option, i) {
                    if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "203_14_15", option.selected)) {
                        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 204);
                        index = i;
                        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 205);
                        return true;
                    }
                });
                if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "208_12_30", _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "208_12_12", index === -1) && _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "208_28_14", !this.multiple))) {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 209);
                    options.some(function(option, i) {
                        if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "210_16_19", option.value === "")) {
                            _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 211);
                            index = i;
                            _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 212);
                            return true;
                        }
                    });
                    if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "215_14_12", index === -1)) {
                        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 216);
                        return 0;
                    }
                }
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 219);
                return index;
            },
            /**
       * The index of the first selected <option> element. The value -1 is returned if no element is selected.
       *
       * @return {Number}
       */
            set: function(index) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 229);
                throw new Error("Not implemented");
            }
        },
        selectedOptions: {
            /**
       * The set of options that are selected.
       *
       * @return {HTMLCollection}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 239);
                return this.options.filter(function(option) {
                    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 240);
                    return option.selected;
                });
            }
        },
        selectedOption: {
            /**
       * The first selected option.
       *
       * @return HTMLOptionElement
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 251);
                var selectedOption;
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 252);
                this.options.some(function(option) {
                    if (_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "253_14_15", option.selected)) {
                        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 254);
                        selectedOption = option;
                        _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 255);
                        return true;
                    }
                });
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 258);
                return selectedOption;
            }
        },
        size: {
            /**
       * Reflects the size HTML attribute, which contains the number of visible items in the control.
       * The default is 1, unless multiple is true, in which case it is 4.
       *
       * @return {Number}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 269);
                return _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "269_15_33", Number(this.getAttribute("size"))) || _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "269_52_23", this.multiple ? _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "269_69_1", 4) : _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "269_73_1", 1));
            },
            /**
       * Reflects the size HTML attribute, which contains the number of visible items in the control.
       *
       * @param {String} name
       */
            set: function(size) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 279);
                this.setAttribute("size", size);
            }
        },
        tabIndex: {
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 284);
                throw new Error("Obsolete since HTML5");
            }
        },
        type: {
            /**
       * The form control's type. When multiple is true, it returns select-multiple; otherwise, it returns select-one.
       * Read only.
       *
       * @return {String}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 295);
                return this.multiple ? _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "295_31_17", "select-multiple") : _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "295_51_12", "select-one");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 298);
                throw new Error("type is read only");
            }
        },
        validationMessage: {
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 303);
                throw new Error("Not implemented");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 306);
                throw new Error("validationMessage is read only");
            }
        },
        validity: {
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 311);
                throw new Error("Not implemented");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 314);
                throw new Error("validity is read only");
            }
        },
        value: {
            /**
       * The value of this form control, that is, of the first selected option.
       *
       * @return {String}
       */
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 324);
                return _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "324_15_19", this.selectedOption) && _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "cond", "324_38_25", this.selectedOption.value);
            },
            /**
       * The value of this form control, that is, of the first selected option.
       *
       * @param {String} value
       */
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 334);
                return this.selectedOption.value = value;
            }
        },
        willValidate: {
            get: function() {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 339);
                throw new Error("Not implemented");
            },
            set: function(value) {
                _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 342);
                throw new Error("willValidate is read only");
            }
        }
    });
    _$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 347);
    return HTMLSelectElement;
}(HTMLElement);

_$jscmd("lib/HTMLElement/elements/HTMLSelectElement.js", "line", 350);

exports.HTMLSelectElement = HTMLSelectElement;