
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/Event.js', [1,3,81,4,61,65,70,74,78,9,15,21,27,33,39,45,51,58,62,66,67,71,75], {}, ["\"use strict\";","","var Event = (function () {","  var Event = function Event(type) {","    /**","     * A boolean indicating whether the event bubbles up through the DOM or not.","     * @type {Boolean}","     */","    this.bubbles = false;","","    /**","     * A boolean indicating whether the event is cancelable.","     * @type {Boolean}","     */","    this.cancelable = false;","","    /**","     * A reference to the currently registered target for the event.","     * @type {HTMLElement}","     */","    this.currentTarget = false;","","    /**","     * Indicates whether or not event.preventDefault() has been called on the event.","     * @type {Boolean}","     */","    this.defaultPrevented = false;","","    /**","     * Indicates which phase of the event flow is being processed.","     * @type {Number}","     */","    this.eventPhase = 0;","","    /**","     * A reference to the target to which the event was originally dispatched.","     * @type {HTMLElement}","     */","    this.target = null;","","    /**","     * The time that the event was created.","     * @type {Number}","     */","    this.timeStamp = Date.now() * 1000;","","    /**","     * The name of the event (case-insensitive).","     * @type {String}","     */","    this.type = type.toLowerCase();","","    /**","     * Indicates whether or not the event was initiated by the browser (after a user click for instance)","     * or by a script (using an event creation method)","     * @type {Boolean}","     */","    this.isTrusted = false;","  };","","  Event.prototype.preventDefault = function () {","    this.defaultPrevented = true;","  };","","  Event.prototype.stopImmediatePropagation = function () {","    this.immediatePropagationStopped = true;","    this.stopPropagation();","  };","","  Event.prototype.stopPropagation = function () {","    this.propagationStopped = true;","  };","","  Event.prototype.isImmediatePropagationStopped = function () {","    return this.immediatePropagationStopped;","  };","","  return Event;","})();","","exports.Event = Event;","//# sourceMappingURL=Event.js.map"]);
_$jscmd("lib/Event.js", "line", 1);

"use strict";

_$jscmd("lib/Event.js", "line", 3);

var Event = function() {
    _$jscmd("lib/Event.js", "line", 4);
    var Event = function Event(type) {
        _$jscmd("lib/Event.js", "line", 9);
        /**
     * A boolean indicating whether the event bubbles up through the DOM or not.
     * @type {Boolean}
     */
        this.bubbles = false;
        _$jscmd("lib/Event.js", "line", 15);
        /**
     * A boolean indicating whether the event is cancelable.
     * @type {Boolean}
     */
        this.cancelable = false;
        _$jscmd("lib/Event.js", "line", 21);
        /**
     * A reference to the currently registered target for the event.
     * @type {HTMLElement}
     */
        this.currentTarget = false;
        _$jscmd("lib/Event.js", "line", 27);
        /**
     * Indicates whether or not event.preventDefault() has been called on the event.
     * @type {Boolean}
     */
        this.defaultPrevented = false;
        _$jscmd("lib/Event.js", "line", 33);
        /**
     * Indicates which phase of the event flow is being processed.
     * @type {Number}
     */
        this.eventPhase = 0;
        _$jscmd("lib/Event.js", "line", 39);
        /**
     * A reference to the target to which the event was originally dispatched.
     * @type {HTMLElement}
     */
        this.target = null;
        _$jscmd("lib/Event.js", "line", 45);
        /**
     * The time that the event was created.
     * @type {Number}
     */
        this.timeStamp = Date.now() * 1e3;
        _$jscmd("lib/Event.js", "line", 51);
        /**
     * The name of the event (case-insensitive).
     * @type {String}
     */
        this.type = type.toLowerCase();
        _$jscmd("lib/Event.js", "line", 58);
        /**
     * Indicates whether or not the event was initiated by the browser (after a user click for instance)
     * or by a script (using an event creation method)
     * @type {Boolean}
     */
        this.isTrusted = false;
    };
    _$jscmd("lib/Event.js", "line", 61);
    Event.prototype.preventDefault = function() {
        _$jscmd("lib/Event.js", "line", 62);
        this.defaultPrevented = true;
    };
    _$jscmd("lib/Event.js", "line", 65);
    Event.prototype.stopImmediatePropagation = function() {
        _$jscmd("lib/Event.js", "line", 66);
        this.immediatePropagationStopped = true;
        _$jscmd("lib/Event.js", "line", 67);
        this.stopPropagation();
    };
    _$jscmd("lib/Event.js", "line", 70);
    Event.prototype.stopPropagation = function() {
        _$jscmd("lib/Event.js", "line", 71);
        this.propagationStopped = true;
    };
    _$jscmd("lib/Event.js", "line", 74);
    Event.prototype.isImmediatePropagationStopped = function() {
        _$jscmd("lib/Event.js", "line", 75);
        return this.immediatePropagationStopped;
    };
    _$jscmd("lib/Event.js", "line", 78);
    return Event;
}();

_$jscmd("lib/Event.js", "line", 81);

exports.Event = Event;