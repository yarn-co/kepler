
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/parser.js', [1,3,6,7,8,11,13,32,33,9,15,16,19,22,25,26,29], {"9_32_4":0,"9_39_23":0}, ["\"use strict\";","","var htmlparser = require(\"htmlparser2\");","","","exports.parse = function (html, node) {","  var stack = [node];","  var last = function () {","    return stack.length === 0 ? null : stack[stack.length - 1];","  };","  var document = node.ownerDocument;","","  var parser = new htmlparser.Parser({","    onopentagname: function (name) {","      var elt = document.createElement(name);","      stack.push(elt);","    },","    onattribute: function (name, value) {","      last().setAttribute(name, value);","    },","    ontext: function (text) {","      last().appendChild(document.createTextNode(text));","    },","    onclosetag: function (name) {","      var elt = stack.pop();","      last().appendChild(elt);","    },","    oncomment: function (data) {","      last().appendChild(document.createComment(data));","    }","  }, { recognizeSelfClosing: true });","  parser.write(html);","  parser.end();","};","//# sourceMappingURL=parser.js.map"]);
_$jscmd("lib/parser.js", "line", 1);

"use strict";

_$jscmd("lib/parser.js", "line", 3);

var htmlparser = require("htmlparser2");

_$jscmd("lib/parser.js", "line", 6);

exports.parse = function(html, node) {
    _$jscmd("lib/parser.js", "line", 7);
    var stack = [ node ];
    _$jscmd("lib/parser.js", "line", 8);
    var last = function() {
        _$jscmd("lib/parser.js", "line", 9);
        return stack.length === 0 ? _$jscmd("lib/parser.js", "cond", "9_32_4", null) : _$jscmd("lib/parser.js", "cond", "9_39_23", stack[stack.length - 1]);
    };
    _$jscmd("lib/parser.js", "line", 11);
    var document = node.ownerDocument;
    _$jscmd("lib/parser.js", "line", 13);
    var parser = new htmlparser.Parser({
        onopentagname: function(name) {
            _$jscmd("lib/parser.js", "line", 15);
            var elt = document.createElement(name);
            _$jscmd("lib/parser.js", "line", 16);
            stack.push(elt);
        },
        onattribute: function(name, value) {
            _$jscmd("lib/parser.js", "line", 19);
            last().setAttribute(name, value);
        },
        ontext: function(text) {
            _$jscmd("lib/parser.js", "line", 22);
            last().appendChild(document.createTextNode(text));
        },
        onclosetag: function(name) {
            _$jscmd("lib/parser.js", "line", 25);
            var elt = stack.pop();
            _$jscmd("lib/parser.js", "line", 26);
            last().appendChild(elt);
        },
        oncomment: function(data) {
            _$jscmd("lib/parser.js", "line", 29);
            last().appendChild(document.createComment(data));
        }
    }, {
        recognizeSelfClosing: true
    });
    _$jscmd("lib/parser.js", "line", 32);
    parser.write(html);
    _$jscmd("lib/parser.js", "line", 33);
    parser.end();
};